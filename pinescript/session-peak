// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© Tenstays

//@version=5
indicator("session-peak", overlay = true, max_lines_count = 500, max_boxes_count = 500)
//+----------------------------------------------------------------------------------------------------------+
//|                                             Indicator settings"                                          |
//+----------------------------------------------------------------------------------------------------------+
// "Input session time"
timeZones = input.string(title = "Time-zone", defval = "UTC+2", options = ["UTC+2"], group = "Sessions")
asianSessionTime = input.session(defval = "0300-0900", title = "", group = "Sessions", inline = "Asia")
londonSessionTime = input.session(defval = "0900-1500", title = "", group = "Sessions", inline = "London")
nySessionTime = input.session(defval = "1500-2100", title = "", group = "Sessions", inline = "NY")
sydneySessionTime = input.session(defval = "2100-0300", title = "", group = "Sessions", inline = "Sydney")
asianTime = time_close(timeframe.period, asianSessionTime, timeZones)
londonTime = time_close(timeframe.period, londonSessionTime, timeZones)
nyTime = time_close(timeframe.period, nySessionTime, timeZones)
sydneyTime = time_close(timeframe.period, sydneySessionTime, timeZones)
// "Input colours"
asianBoxColor = input(title = "", defval = color.new(color.blue, 80), group = "Sessions", inline = "Asia")
londBoxColor = input(title = "", defval = color.new(color.lime, 80), group = "Sessions", inline = "London")
nyBoxColor = input(title = "", defval = color.new(color.red, 80), group = "Sessions", inline = "NY")
sydneyBoxColor = input(title = "", defval = color.new(color.yellow, 80), group = "Sessions", inline = "Sydney")
// "Show session input"
asianSession = input.bool(title = "Asia", defval = false, group = "Sessions", inline = "Asia")
londonSession = input.bool(title = "London", defval = false, group = "Sessions", inline = "London")
nySession = input.bool(title = "New York", defval = false, group = "Sessions", inline = "NY")
sydneySession = input.bool(title = "Sydney", defval = false, group = "Sessions", inline = "Sydney")
// "Session/Daily connection data input"
sessionConnectColor = input.color(title = "", defval = color.new(color.red, 10), group = "Connect", inline = "Session connection")
sessionConnectWidth = input.int(title = "", defval = 2, minval = 1, maxval = 5, group = "Connect", inline = "Session connection")
sessionConnect = input.bool(title = "Session connect", defval = false, group = "Connect", inline = "Session connection")
//+----------------------------------------------------------------------------------------------------------+
//|                                             "Define functions"                                           |
//+----------------------------------------------------------------------------------------------------------+
// "Draw session boxes"
getSessions(sessionTime, sessionColor, enableSession, highs, lows, realTime = true, pushBack = false) =>
    // "Set buffer size"
    max_bars_back(sessionTime, 3000)
    max_bars_back(highs, 3000)
    max_bars_back(lows, 3000)
    int counter = 0
    int itrStops = 2999
    int pushItBack = pushBack ? 0 : 1
    float highestPoint = highs[1]
    float lowestPoint = lows[1]
    box sessionBoxRT = na
    box.delete(sessionBoxRT[1])
    if enableSession
        if na(sessionTime) and not na(sessionTime[1])
            for i = 1 to itrStops
                if na(sessionTime[i])
                    break
                counter := i
                highestPoint := math.max(highestPoint, highs[i])
                lowestPoint := math.min(lowestPoint, lows[i])
            // "Draw session box"
            box.new(bar_index - counter, highestPoint, bar_index - pushItBack, lowestPoint, border_color = sessionColor, border_width = 1, bgcolor= sessionColor)
        // "Draw session box if session is incomplete (real-time)"
        else if barstate.islast and realTime
            if not na(sessionTime) and not na(sessionTime[1])
                counter := 0
                highestPoint := highs[1]
                lowestPoint := lows[1]
                for i = 1 to itrStops
                    if na(sessionTime[i])
                        break
                    counter := i
                    highestPoint := math.max(highestPoint, highs[i])
                    lowestPoint := math.min(lowestPoint, lows[i])
                sessionBoxRT := box.new(bar_index - counter, highestPoint, bar_index - 1, lowestPoint, border_color = sessionColor, border_width = 1, bgcolor = sessionColor)
//+----------------------------------------------------------------------------------------------------------+
//|                                             "Draw session boxes"                                           |
//+----------------------------------------------------------------------------------------------------------+
float Closed = close
float Highed = high
float Lowed = low
getSessions(asianTime, asianBoxColor, asianSession, Highed, Lowed)
getSessions(londonTime, londBoxColor, londonSession, Highed, Lowed)
getSessions(nyTime, nyBoxColor, nySession, Highed, Lowed)
getSessions(sydneyTime, sydneyBoxColor, sydneySession, Highed, Lowed)
// getSessions(allDatTime, allDayBoxColor, allDay, Highed, Lowed, realTime = false, pushBack = true)
//+----------------------------------------------------------------------------------------------------------+
//|                                             "Plot data points"                                           |
//+----------------------------------------------------------------------------------------------------------+
// "Focus on session data points"
float collectSessionData = na
line collectSessionDataRT = na
line.delete(collectSessionDataRT[1])
// "Set buffer size"
max_bars_back(collectSessionData, 150)
if sessionConnect
    if na(asianTime) and not na(asianTime[1])
        collectSessionData := Closed[1]
    else if na(londonTime) and not na(londonTime[1])
        collectSessionData := Closed[1]
    else if na(nyTime) and not na(nyTime[1])
        collectSessionData := Closed[1]
    else if na(sydneyTime) and not na(sydneyTime[1])
        collectSessionData := Closed[1]
    // "Collect session data in real-time"
    if barstate.islast and na(collectSessionData[1])
        int itrStop = 100
        for i = 1 to itrStop
            if not na(collectSessionData[i])
                collectSessionDataRT := line.new(bar_index-1, Closed[1], bar_index-(i+1), collectSessionData[i], width= sessionConnectWidth, color= sessionConnectColor)
                break
// "A plot series of collected session data..."
plot(collectSessionData, title = "collection data line", linewidth = sessionConnectWidth, color = sessionConnectColor, offset = -1)
plot(collectSessionData, title = "collection data dots", linewidth = 6, color = sessionConnectColor, offset = -1, style = plot.style_circles)
